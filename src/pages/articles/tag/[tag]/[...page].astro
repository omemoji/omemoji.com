---
import { getCollection } from "astro:content";
import type { CollectionEntry } from "astro:content";
import type { Page, PaginateFunction } from "astro";

import Layout from "@/layouts/Layout.astro";
import Top from "@/components/Top.astro";
import ArticlesList from "@/components/ArticlesList.astro";
import { COUNT_PER_PAGE } from "@/lib/constant";
import PageBar from "@/components/PageBar.astro";
import { pageIdGen } from "@/lib/fs";

interface Props {
  page: Page<CollectionEntry<"articles">>;
}

export async function getStaticPaths({
  paginate,
}: {
  paginate: PaginateFunction;
}) {
  const allArticles: CollectionEntry<"articles">[] = await getCollection(
    "articles",
    ({ data }) => {
      return import.meta.env.PROD ? data.published : true;
    }
  );
  const tags: string[] = [
    ...new Set(
      allArticles.flatMap(
        (article: CollectionEntry<"articles">) => article.data.tags ?? []
      )
    ),
  ];

  const paginates = tags.flatMap((tag: string) => {
    const posts = allArticles
      .filter((article: CollectionEntry<"articles">) =>
        article.data.tags?.includes(tag)
      )
      .sort((a, b) => a.data.date.getTime() - b.data.date.getTime())
      .reverse();
    return paginate(posts, { pageSize: COUNT_PER_PAGE, params: { tag } });
  });
  return paginates;
}

const { page } = Astro.props;
const params = Astro.params;
---

<Layout
  title={params.tag + ": Articles | 創作物紹介"}
  description="日記や技術的な記事など"
  category="Articles"
  path={page.url.current}
  og={{ enabled: true }}
>
  <Top
    title={"#" + params.tag}
    category="Articles"
    description={"Tag: " + params.tag}
  />
  <ArticlesList page={page} />
  <PageBar
    category="articles"
    current={page.currentPage}
    pages={pageIdGen(Math.ceil(page.total / COUNT_PER_PAGE))}
  />
</Layout>
